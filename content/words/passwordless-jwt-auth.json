{
  "visible": false,
  "date": "2020-06-20T22:14:46.745Z",
  "updated": "2020-06-20T22:14:46.776Z",
  "title": "Passwordless JWT authentication with NuxtJS, VueJS, Lumen, and Mailgun",
  "project": "remotefaces",
  "description": "desc",
  "content": "Remote Faces is a website that allows a user to create their own virtual coworking space. Either on a subdomain, eg [here](https://ih.remotefaces.com/). Or on a custom domain, eg [here](https://imperfect.website/). Additionally, users can join unlimited coworking spaces created by others.\n\nNo matter how many coworking spaces a user belongs to, they only have a single remotefaces account. This is hugely advantageous for managing usernames, newsletter subscriptions, status updates, etc. But the downside is... you can't very well have a shared password between two sites that the user might not even know are related. Accounting nightmare.\n\nSo to accomplish this I needed to create a passwordless auth system, which I modeled after Substack's (a platform where a single user can both create a publication, and also join unlimited publications).\n\nThe following snippets show what happens when a user tries to join a coworking space. To see this code in action, go to [ih.remotefaces.com/join](https://ih.remotefaces.com/join). \n\nThe relevant lines of frontend code are lines 121-143 and lines 90-113 of [https://github.com/patricklorenzut/happy.remotefaces.com/blob/master/pages/join.vue](https://github.com/patricklorenzut/happy.remotefaces.com/blob/master/pages/join.vue)\n\n```javascript\nasync submitEmail(){\n    this.isLoading = true         \n    try {            \n      await this.$axios.post('/rooms/subscribe', {\n        email: this.email,\n        room_id: this.room.id,\n        name: this.name\n      }).then((result) => {\n        this.isLoading = false \n        if(result.data && result.data.success){\n          if(result.data.user){\n            this.step = 3 //skip the username selection\n          }else{\n            this.user_id = result.data.user_id\n            this.step = 2\n          }\n        }      \n      })\n\t\t...\nasync setUsername(){\n    this.isLoading = true \n    try {            \n      await this.$axios.post('/user/setUsername', {\n        username: this.username,\n        user_id: this.user_id,\n        room_id: this.room.id,\n        name: this.name\n      }).then((result) => {\n        this.isLoading = false \n        this.step = 3     \n      })\n    } catch (e) {      \n      var error_message = 'Unknown error. Please please please contact patrick@lorenzut.com and heâ€™ll fix it.'\n      if(e.response.data.username){\n        error_message = e.response.data.username\n      }\n      else if(e.response.data.message){\n        error_message = e.response.data.message\n      }\n      this.$toast.error(error_message)\n      this.isLoading = false\n    }\n  },\n```\n\nIn the code above, after clicking a \"join room\" button inside a coworking space, the user enters their email address. \n\n1. If the email address already exists in the database AND a username is correlated, this means that the user has already joined a different coworking space (or they have already joined this one, so we'll just pretend this is the login page). So we simply email them a login link and thank them for joining this additional room.\n2. If not, then they are either signing up for their first coworking space, or they previously started to sign up but never finished. Either way, we then ask them to choose a username, and then send that username for validation, and THEN send them the email login link.\n\nThe most relevant backend code powering all of this is\n1.  Lines 32 - 64 of [https://github.com/patricklorenzut/bananas.remotefaces.com/blob/master/app/Http/Controllers/RoomController.php](https://github.com/patricklorenzut/bananas.remotefaces.com/blob/master/app/Http/Controllers/RoomController.php) handle the logic of checking if a user with that email address already exists, creating a new user if not, and then creating a relationship between the user and the room. An email login link is sent only if the user already has a username, as this is the only way that they're done the signup process.\n2.  Lines 110 - 152 of [https://github.com/patricklorenzut/bananas.remotefaces.com/blob/master/app/Http/Controllers/UserController.php](https://github.com/patricklorenzut/bananas.remotefaces.com/blob/master/app/Http/Controllers/UserController.php) are called only if a username needs to be set, and handle the logic of this process, making sure that the username is unique and valid, and then emailing the user a login link.\n\nThere's obviously more code involved in this auth flow, like the code that emails the login links, the code that validates the login links and handles the jwt auth token, etc. But I feel like the above gives a good enough overview of the process."
}